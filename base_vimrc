set nocompatible  " not compatible with vi
" set runtimepath+=~/.vim  " set runtime for loading color scheme

" base vimrc file, fast, useful, server-friendly
"_____________________________________________________
"| Shortcuts list:
"|
"| kj 替换 Esc
"| 分屏窗口移动, Smart way to move between windows
"| Ctrl-j -> j
"| <C-k>  -> k
"| <C-h>  -> h
"| <C-l>  -> l
"| << ; >> 快速进入命令行
"| <F4>  fast open terminal
"| <F3>  open directory
"| <Esc>  exit neovim terminal emulator
"| ctrl+t  背景透明/不透明切换
"_____________________________________________________


" 语法检查/高亮 Syntax Checking/Highlighting
syntax on

" 配色方案 color schmes
" true colors supports
set termguicolors " work with deset
" set background=dark
colorscheme desert
" colorscheme morning

set backspace=indent,eol,start "退格键删除
set splitbelow  " 分割布局 split layouts
set splitright

" PEP8风格的缩进
set tabstop=4 " tab键宽度
set softtabstop=4 " 退格键每次删除4个空格
set textwidth=79
set expandtab
set autoindent
set smartindent
set smarttab " Tab 转空格
set fileformat=unix
set encoding=utf-8
set nu "行号
" 启用鼠标
set mouse=a " mouse-=a to cancel

" 去掉输入错误的提示声音
set novisualbell
set noerrorbells
set tm=500
set ruler  "显示当前行号列号
set showmatch "括号配对并高亮
set hlsearch "高亮搜索命中
set incsearch "打开即时搜索
set ignorecase "忽略大小写搜索
set smartcase "必要搜索时大小写敏感

" kj 替换 Esc
inoremap kj <Esc>
"L ->回到行尾
map L $
"H ->回到行首
map H 0

" 分屏窗口移动, Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
" Map ; to :and save a million keystrokes 快速进入命令行
nnoremap ; :
" Fast splitly open terminal
" nnoremap <F4> :split term://bash<cr>
nnoremap <F4> :split term://zsh<cr>
" Fast into directory
nnoremap <F3> :Ve<cr>
" exit neovim terminal emulator
tnoremap <Esc> <C-\><C-n>
" for # indent, python文件中输入新行时#号注释不切回行首
autocmd BufNewFile,BufRead *.py inoremap # X<c-h>#

" 针对不同文件类型采用不同缩进格式
filetype indent on
autocmd FileType c setlocal shiftwidth=8
autocmd FileType ruby setlocal shiftwidth=2
autocmd FileType python setlocal shiftwidth=4
autocmd FileType html setlocal shiftwidth=2
autocmd FileType htmldjango setlocal shiftwidth=2
autocmd FileType go setlocal shiftwidth=4
autocmd FileType java setlocal shiftwidth=2
autocmd FileType javascript setlocal shiftwidth=2
autocmd FileType sh setlocal shiftwidth=4
autocmd FileType yaml setlocal shiftwidth=2

" 打开自动定位到最后编辑的位置, 需要确认 .viminfo 当前用户可写
if has("autocmd")                                                          
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif                                                        
endif

" 保存文件时删除多余行尾空格
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces    ()

" 定义函数，检查文件类型并自动插入文件头
autocmd BufNewFile *.sh,*.py,*.c,*.cpp exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
  if &filetype == 'sh'
    call setline(1, "\#!/bin/bash")
  endif

  if &filetype == 'python'
    call setline(1, "\# -*- coding:utf-8 -*-")
  endif

  if &filetype == 'cpp'
    call setline(1, "\#include <iostream>")
  endif

  if &filetype == 'c'
    call setline(1, "\#include <stdio.h>")
  endif

  normal G
  normal o
  normal o
endfunc

" 背景透明/不透明切换, ctrl+t
let t:is_transparent = 0
function! Toggle_transparent()
        if t:is_transparent == 0
                hi Normal guibg=NONE ctermbg=NONE
                let t:is_transparent = 1
        else
                set background=dark
                let t:is_transparent = 0
        endif
endfunction
nnoremap <C-t> : call Toggle_transparent()<CR>

" Display a manual page in a nice way.
" help doc for:help man
runtime ftplugin/man.vim



" vim: set noet fenc=utf-8 ff=unix sts=4 sw=4 ts=4 :

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" apc.vim - auto popup completion window                          "
"                                                                 "
" https://github.com/skywind3000/vim/blob/master/site/opt/apc.vim "
"                                                                 "
" Created by skywind on 2020/03/05                                "
" Last Modified: 2021/03/11 08:45                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Features:
"
" - auto popup complete window without select the first one
" - tab/s-tab to cycle suggestions, <c-e> to cancel
" - use ApcEnable/ApcDisable to toggle for certiain file.
"
" Usage:
"
" set cpt=.,k,b
set completeopt=menu,menuone,noselect " 避免补全窗口频繁补全闪烁
" let g:apc_enable_ft = {'text':1, 'markdown':1, 'php':1}

let g:apc_enable_ft = get(g:, 'apc_enable_ft',{'python':1,'ruby':1,'javascript':1,'css':1, 'html':1, 'java':1, 'c':1,'cpp':1,'sh':1,'go':1,'json':1, 'markdown':1,'php':1,'yaml':1,'htmldjango':1,'rust':1, 'erlang':1, 'elixir':1})    " enable filetypes
let g:apc_enable_tab = get(g:, 'apc_enable_tab', 1)   " remap tab
let g:apc_min_length = get(g:, 'apc_min_length', 2)   " minimal length to open popup
let g:apc_key_ignore = get(g:, 'apc_key_ignore', [])  " ignore keywords

" get word before cursor
function! s:get_context()
	return strpart(getline('.'), 0, col('.') - 1)
endfunc

function! s:meets_keyword(context)
	if g:apc_min_length <= 0
		return 0
	endif
	let matches = matchlist(a:context, '\(\k\{' . g:apc_min_length . ',}\)$')
	if empty(matches)
		return 0
	endif
	for ignore in g:apc_key_ignore
		if stridx(ignore, matches[1]) == 0
			return 0
		endif
	endfor
	return 1
endfunc

function! s:check_back_space() abort
	  return col('.') < 2 || getline('.')[col('.') - 2]  =~# '\s'
endfunc

function! s:on_backspace()
	if pumvisible() == 0
		return "\<BS>"
	endif
	let text = matchstr(s:get_context(), '.*\ze.')
	return s:meets_keyword(text)? "\<BS>" : "\<c-e>\<bs>"
endfunc


" autocmd for CursorMovedI
function! s:feed_popup()
	let enable = get(b:, 'apc_enable', 0)
	let lastx = get(b:, 'apc_lastx', -1)
	let lasty = get(b:, 'apc_lasty', -1)
	let tick = get(b:, 'apc_tick', -1)
	if &bt != '' || enable == 0 || &paste
		return -1
	endif
	let x = col('.') - 1
	let y = line('.') - 1
	if pumvisible()
		let context = s:get_context()
		if s:meets_keyword(context) == 0
			call feedkeys("\<c-e>", 'n')
		endif
		let b:apc_lastx = x
		let b:apc_lasty = y
		let b:apc_tick = b:changedtick
		return 0
	elseif lastx == x && lasty == y
		return -2
	elseif b:changedtick == tick
		let lastx = x
		let lasty = y
		return -3
	endif
	let context = s:get_context()
	if s:meets_keyword(context)
		silent! call feedkeys("\<c-n>", 'n')
		let b:apc_lastx = x
		let b:apc_lasty = y
		let b:apc_tick = b:changedtick
	endif
	return 0
endfunc

" autocmd for CompleteDone
function! s:complete_done()
	let b:apc_lastx = col('.') - 1
	let b:apc_lasty = line('.') - 1
	let b:apc_tick = b:changedtick
endfunc

" enable apc
function! s:apc_enable()
	call s:apc_disable()
	augroup ApcEventGroup
		au!
		au CursorMovedI <buffer> nested call s:feed_popup()
		au CompleteDone <buffer> call s:complete_done()
	augroup END
	let b:apc_init_autocmd = 1
	if g:apc_enable_tab
		inoremap <silent><buffer><expr> <tab>
					\ pumvisible()? "\<c-n>" :
					\ <SID>check_back_space() ? "\<tab>" : "\<c-n>"
		inoremap <silent><buffer><expr> <s-tab>
					\ pumvisible()? "\<c-p>" : "\<s-tab>"
		let b:apc_init_tab = 1
	endif
	if get(g:, 'apc_cr_confirm', 0) == 0
		inoremap <silent><buffer><expr> <cr> 
					\ pumvisible()? "\<c-y>\<cr>" : "\<cr>"
	else
		inoremap <silent><buffer><expr> <cr> 
					\ pumvisible()? "\<c-y>" : "\<cr>"
	endif
	inoremap <silent><buffer><expr> <bs> <SID>on_backspace()
	let b:apc_init_bs = 1
	let b:apc_init_cr = 1
	let b:apc_save_infer = &infercase
	setlocal infercase
	let b:apc_enable = 1
endfunc

" disable apc
function! s:apc_disable()
	if get(b:, 'apc_init_autocmd', 0)
		augroup ApcEventGroup
			au! 
		augroup END
	endif
	if get(b:, 'apc_init_tab', 0)
		silent! iunmap <buffer><expr> <tab>
		silent! iunmap <buffer><expr> <s-tab>
	endif
	if get(b:, 'apc_init_bs', 0)
		silent! iunmap <buffer><expr> <bs>
	endif
	if get(b:, 'apc_init_cr', 0)
		silent! iunmap <buffer><expr> <cr>
	endif
	if get(b:, 'apc_save_infer', '') != ''
		let &l:infercase = b:apc_save_infer
	endif
	let b:apc_init_autocmd = 0
	let b:apc_init_tab = 0
	let b:apc_init_bs = 0
	let b:apc_init_cr = 0
	let b:apc_save_infer = ''
	let b:apc_enable = 0
endfunc

" check if need to be enabled
function! s:apc_check_init()
	if &bt != ''
		return
	endif
	if get(g:apc_enable_ft, &ft, 0) != 0
		ApcEnable
	elseif get(g:apc_enable_ft, '*', 0) != 0
		ApcEnable
	elseif get(b:, 'apc_enable', 0)
		ApcEnable
	endif
endfunc

" commands & autocmd
command! -nargs=0 ApcEnable call s:apc_enable()
command! -nargs=0 ApcDisable call s:apc_disable()

augroup ApcInitGroup
	au!
	au FileType * call s:apc_check_init()
	au BufEnter * call s:apc_check_init()
	au TabEnter * call s:apc_check_init()
augroup END
